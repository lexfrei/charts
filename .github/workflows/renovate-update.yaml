name: Update Renovate PR

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'charts/**/Chart.yaml'
      - 'charts/**/values.yaml'

jobs:
  update-renovate-pr:
    # Only run on Renovate PRs, but not on commits from github-actions bot
    if: startsWith(github.head_ref, 'renovate/') && github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install tools
        run: |
          # Install yq
          # renovate: datasource=github-releases depName=mikefarah/yq
          YQ_VERSION="4.44.3"
          wget -q https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 -O yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq
          yq --version

          # Install helm-docs
          # renovate: datasource=github-releases depName=norwoodj/helm-docs
          HELM_DOCS_VERSION="1.14.2"
          wget -q https://github.com/norwoodj/helm-docs/releases/download/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
          tar -xzf helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/bin/
          sudo chmod +x /usr/local/bin/helm-docs

      - name: Update charts
        id: update
        run: |
          set -e
          CHANGES_MADE=false

          # Collect all unique chart directories that have changes
          changed_charts=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | \
            grep -E '^charts/.+/(Chart\.yaml|values\.yaml)$' | \
            sed 's|/[^/]*$||' | \
            sort -u || true)

          if [ -z "$changed_charts" ]; then
            echo "No chart changes detected"
            echo "changes_made=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          for chart_dir in $changed_charts; do
            echo "Processing chart: $chart_dir"

            chart_file="$chart_dir/Chart.yaml"

            if [ ! -f "$chart_file" ]; then
              echo "‚ö†Ô∏è  Chart.yaml not found in $chart_dir, skipping"
              continue
            fi

            # Extract description from PR title
            # Format: "chore(deps): update rancher/kubectl docker tag to v1.34.1" -> "Update rancher/kubectl docker tag to v1.34.1"
            pr_title="${{ github.event.pull_request.title }}"
            # Remove conventional commit prefix (e.g., "chore(deps): ") and capitalize first letter (GNU sed)
            changelog_desc=$(echo "$pr_title" | sed -E 's/^[^:]+:\s*//' | sed 's/^./\U&/')

            # Update changelog annotation with PR description
            export changelog_desc
            yq eval -i '.annotations."artifacthub.io/changes" = "- kind: changed\n  description: " + env(changelog_desc)' \
              "$chart_file"

            echo "‚úÖ Updated Chart.yaml changelog"

            # Generate documentation if README.md.gotmpl exists
            if [ -f "$chart_dir/README.md.gotmpl" ]; then
              echo "üìö Generating documentation for $chart_dir"
              helm-docs "$chart_dir"
              echo "‚úÖ Generated documentation for $chart_dir"
            else
              echo "‚ÑπÔ∏è  No README.md.gotmpl found in $chart_dir, skipping documentation generation"
            fi

            CHANGES_MADE=true
          done

          echo "changes_made=$CHANGES_MADE" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.update.outputs.changes_made == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add charts/**/Chart.yaml charts/**/README.md
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update changelog and documentation"
            git push
          fi

      - name: Enable auto-merge
        if: steps.update.outputs.changes_made == 'true'
        run: |
          echo "Enabling auto-merge for PR #${{ github.event.pull_request.number }}"
          gh pr merge --auto --squash ${{ github.event.pull_request.number }}
          echo "‚úÖ Auto-merge enabled, PR will merge automatically when all checks pass"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger tests after bot commit
        if: steps.update.outputs.changes_made == 'true'
        run: |
          # Get list of changed charts from the update step
          changed_charts=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | \
            grep -E '^charts/.+/(Chart\.yaml|values\.yaml)$' | \
            sed 's|/[^/]*$||' | \
            sort -u | \
            jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Triggering tests for charts: $changed_charts"

          # Only trigger if we have charts to test
          if [[ "$changed_charts" != "[]" ]]; then
            # Trigger the test workflow with the changed charts
            gh workflow run test.yaml \
              --ref ${{ github.head_ref }} \
              --field charts="$changed_charts"
            echo "‚úÖ Test workflow triggered successfully"
          else
            echo "‚ÑπÔ∏è No charts to test, skipping workflow trigger"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
