name: Lint and Test Charts

on:
  pull_request:
    # Run on all PRs to validate charts and workflow changes
  push:
    # Run only on pushes to master to validate after merge
    branches:
      - master
  workflow_dispatch:
    inputs:
      charts:
        description: 'JSON array of chart paths to test (optional)'
        required: false
        type: string

jobs:
  lint-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart:
          - charts/cloudflare-tunnel
          - charts/me-site
          - charts/system-upgrade-controller
          - charts/transmission
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Install tools
        run: |
          # helm-unittest
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

          # JSON schema validator
          pip install check-jsonschema

          # Artifact Hub CLI
          # renovate: datasource=github-releases depName=artifacthub/hub
          AH_VERSION="1.21.0"
          wget -q https://github.com/artifacthub/hub/releases/download/v${AH_VERSION}/ah_${AH_VERSION}_linux_amd64.tar.gz
          tar -xzf ah_${AH_VERSION}_linux_amd64.tar.gz
          chmod +x ah
          sudo mv ah /usr/local/bin/ah

          # helm-docs
          # renovate: datasource=github-releases depName=norwoodj/helm-docs
          HELM_DOCS_VERSION="1.14.2"
          wget -q https://github.com/norwoodj/helm-docs/releases/download/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
          tar -xzf helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
          chmod +x helm-docs
          sudo mv helm-docs /usr/local/bin/helm-docs

          # markdownlint-cli
          npm install -g markdownlint-cli

      # Chain 1: Helm validation -> Unit tests -> Advanced linting
      - name: Run Helm Lint
        run: |
          echo "üîç Running Helm lint..."
          helm lint ${{ matrix.chart }}

      - name: Run Helm Unittest
        run: |
          CHART_DIR="${{ matrix.chart }}"
          if [ -d "$CHART_DIR/tests" ]; then
            echo "üß™ Running unit tests..."
            helm unittest $CHART_DIR --color --with-subchart=false
          else
            echo "‚ÑπÔ∏è  No tests directory found, skipping unit tests"
          fi

      - name: Run chart-testing (lint)
        run: |
          echo "üìã Running chart-testing lint..."
          ct lint --charts ${{ matrix.chart }}

      - name: Run Artifact Hub Lint
        run: |
          echo "üèõÔ∏è  Running Artifact Hub lint..."
          ah lint --kind helm --path "${{ matrix.chart }}"

      # Chain 2: Schema validation -> README validation -> Markdown lint
      - name: Validate values.schema.json
        run: |
          CHART_DIR="${{ matrix.chart }}"
          SCHEMA_FILE="$CHART_DIR/values.schema.json"
          VALUES_FILE="$CHART_DIR/values.yaml"

          if [ -f "$SCHEMA_FILE" ]; then
            echo "üìê Validating values.yaml against schema..."
            check-jsonschema --schemafile "$SCHEMA_FILE" "$VALUES_FILE"
          else
            echo "‚ÑπÔ∏è  No schema file found, skipping schema validation"
          fi

      - name: Check README is up to date (helm-docs)
        run: |
          CHART_DIR="${{ matrix.chart }}"

          if [ -f "$CHART_DIR/README.md.gotmpl" ]; then
            echo "üìö Checking if README.md is up to date..."
            helm-docs "$CHART_DIR"

            if git diff --exit-code "$CHART_DIR/README.md" > /dev/null 2>&1; then
              echo "‚úÖ README.md is up to date!"
            else
              echo ""
              echo "‚ùå ERROR: README.md is out of date!"
              echo ""
              echo "To fix, run: helm-docs charts/$(basename $CHART_DIR)"
              echo ""
              git diff "$CHART_DIR/README.md"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  No README.md.gotmpl found, skipping"
          fi

      - name: Run Markdown Lint
        run: |
          CHART_DIR="${{ matrix.chart }}"
          if [ -f "$CHART_DIR/README.md" ]; then
            echo "üìù Linting README.md..."
            markdownlint "$CHART_DIR/README.md"
          else
            echo "‚ÑπÔ∏è  No README.md found, skipping"
          fi
