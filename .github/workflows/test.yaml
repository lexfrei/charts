name: Lint and Test Charts

on:
  pull_request:
    paths:
      - 'charts/**'
  push:
    branches:
      - master
    paths:
      - 'charts/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.list-changed.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --chart-dirs charts)
          if [[ -n "$changed" ]]; then
            # Convert newline-separated list to JSON array
            charts_json=$(echo "$changed" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "charts=$charts_json" >> "$GITHUB_OUTPUT"
          else
            echo "charts=[]" >> "$GITHUB_OUTPUT"
          fi

  lint-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.charts != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Install helm-unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Install JSON Schema validator
        run: pip install check-jsonschema

      - name: Run Helm Lint
        run: |
          helm lint ${{ matrix.chart }}

      - name: Run Helm Template (dry-run validation)
        run: |
          CHART_DIR="${{ matrix.chart }}"
          
          # Create a test values file with required fields for cloudflare-tunnel
          if [[ "$CHART_DIR" == *"cloudflare-tunnel"* ]]; then
            cat > test-values.yaml << EOF
          cloudflare:
            account: "test-account"
            tunnelName: "test-tunnel"
            tunnelId: "test-tunnel-id"
            secret: "test-secret"
            ingress:
              - hostname: test.example.com
                service: http://test-service:80
          EOF
            helm template test-release ${{ matrix.chart }} -f test-values.yaml > /dev/null
          else
            # For other charts, just run template without values
            helm template test-release ${{ matrix.chart }} > /dev/null || true
          fi

      - name: Validate values.schema.json (if exists)
        run: |
          CHART_DIR="${{ matrix.chart }}"
          SCHEMA_FILE="$CHART_DIR/values.schema.json"
          VALUES_FILE="$CHART_DIR/values.yaml"
          
          if [ -f "$SCHEMA_FILE" ]; then
            echo "Validating $VALUES_FILE against $SCHEMA_FILE"
            check-jsonschema --schemafile "$SCHEMA_FILE" "$VALUES_FILE"
          else
            echo "No schema file found at $SCHEMA_FILE, skipping schema validation"
          fi

      - name: Run Helm Unittest
        run: |
          CHART_DIR="${{ matrix.chart }}"
          if [ -d "$CHART_DIR/tests" ]; then
            echo "Running unit tests for $CHART_DIR"
            helm unittest $CHART_DIR --color --with-subchart=false
          else
            echo "No tests directory found in $CHART_DIR, skipping unit tests"
          fi

      - name: Run chart-testing (lint)
        run: |
          ct lint --target-branch ${{ github.event.repository.default_branch }} --charts ${{ matrix.chart }}

      - name: Check README is up to date (helm-docs)
        run: |
          CHART_DIR="${{ matrix.chart }}"
          
          # Check if README.md.gotmpl exists
          if [ -f "$CHART_DIR/README.md.gotmpl" ]; then
            echo "üìö Found README.md.gotmpl, checking if README.md is up to date..."
            
            # Install helm-docs
            echo "‚¨áÔ∏è  Installing helm-docs..."
            HELM_DOCS_VERSION="1.14.2"
            wget -q https://github.com/norwoodj/helm-docs/releases/download/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
            tar -xzf helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
            chmod +x helm-docs
            
            # Generate README
            echo "üîÑ Generating README.md..."
            ./helm-docs "$CHART_DIR"
            
            # Check if there are changes
            if git diff --exit-code "$CHART_DIR/README.md" > /dev/null 2>&1; then
              echo "‚úÖ README.md is up to date!"
            else
              echo ""
              echo "‚ùå ERROR: README.md is out of date!"
              echo ""
              echo "The generated README.md differs from the committed version."
              echo "This usually means you modified values.yaml, Chart.yaml, or README.md.gotmpl"
              echo "but forgot to regenerate the README.md file."
              echo ""
              echo "To fix this, please run the following command locally:"
              echo ""
              echo "  helm-docs charts/$(basename $CHART_DIR)"
              echo ""
              echo "Or if you don't have helm-docs installed:"
              echo ""
              echo "  docker run --rm -v \$(pwd):/helm-docs jnorwood/helm-docs:v${HELM_DOCS_VERSION} -c charts/$(basename $CHART_DIR)"
              echo ""
              echo "Then commit and push the changes."
              echo ""
              echo "Detected changes:"
              git diff "$CHART_DIR/README.md"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  No README.md.gotmpl found in $CHART_DIR, skipping helm-docs check"
          fi
