name: Publish Charts to OCI

on:
  push:
    branches:
      - master
    paths:
      - 'charts/**'
      - '!charts/.deploy/**'
  workflow_dispatch:
    inputs:
      charts:
        description: 'JSON array of chart paths to publish (optional)'
        required: false
        type: string

permissions:
  contents: write      # Create releases
  packages: write      # Push to GHCR
  id-token: write      # Keyless signing with OIDC

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.list-changed.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: latest

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Detect changed charts
        id: list-changed
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.charts }}" ]]; then
            # Use manually provided charts list
            charts_input='${{ inputs.charts }}'
            echo "Raw input received: $charts_input"

            if charts_json=$(echo "$charts_input" | jq -c '.' 2>/dev/null); then
              echo "charts=$charts_json" >> "$GITHUB_OUTPUT"
              echo "Using manually provided charts: $charts_json"
            else
              echo "charts=[]" >> "$GITHUB_OUTPUT"
              echo "Invalid JSON provided: $charts_input"
            fi
          else
            # Auto-detect changed charts
            changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --chart-dirs charts)
            if [[ -n "$changed" ]]; then
              # Convert newline-separated list to JSON array
              charts_json=$(echo "$changed" | jq -R -s -c 'split("\n") | map(select(length > 0))')
              echo "charts=$charts_json" >> "$GITHUB_OUTPUT"
              echo "Auto-detected changed charts: $charts_json"
            else
              echo "charts=[]" >> "$GITHUB_OUTPUT"
              echo "No changed charts detected"
            fi
          fi

  publish:
    needs: detect-changes
    if: needs.detect-changes.outputs.charts != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.charts) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: latest

      - name: Install cosign
        uses: sigstore/cosign-installer@v4.0.0

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Install helm-unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Install check-jsonschema
        run: pip install check-jsonschema

      - name: Get chart metadata
        id: chart-metadata
        run: |
          CHART_PATH="${{ matrix.chart }}"
          CHART_NAME=$(yq eval '.name' "${CHART_PATH}/Chart.yaml")
          CHART_VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")
          APP_VERSION=$(yq eval '.appVersion' "${CHART_PATH}/Chart.yaml")

          echo "path=${CHART_PATH}" >> $GITHUB_OUTPUT
          echo "name=${CHART_NAME}" >> $GITHUB_OUTPUT
          echo "version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${CHART_NAME}-${CHART_VERSION}" >> $GITHUB_OUTPUT

          echo "Chart: ${CHART_NAME} v${CHART_VERSION} (app: ${APP_VERSION})"

      - name: Check if version already exists
        id: check-version
        run: |
          if gh release view "${{ steps.chart-metadata.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.chart-metadata.outputs.tag }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.chart-metadata.outputs.tag }} does not exist"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run validation tests
        if: steps.check-version.outputs.exists == 'false'
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"

          echo "Running validation for ${CHART_NAME} v${{ steps.chart-metadata.outputs.version }}"

          # Lint
          helm lint "${CHART_PATH}"

          # Schema validation (if schema exists)
          if [ -f "${CHART_PATH}/values.schema.json" ]; then
            check-jsonschema --schemafile "${CHART_PATH}/values.schema.json" "${CHART_PATH}/values.yaml"
          else
            echo "No schema found, skipping schema validation"
          fi

          # Unit tests (if tests exist)
          if [ -d "${CHART_PATH}/tests" ]; then
            helm unittest "${CHART_PATH}" --color
          else
            echo "No tests found, skipping unit tests"
          fi

      - name: Login to GitHub Container Registry
        if: steps.check-version.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and push chart
        if: steps.check-version.outputs.exists == 'false'
        id: push
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"
          CHART_VERSION="${{ steps.chart-metadata.outputs.version }}"

          # Package chart
          helm package "${CHART_PATH}"

          # Push to GHCR
          CHART_FILE="${CHART_NAME}-${CHART_VERSION}.tgz"
          helm push "${CHART_FILE}" oci://ghcr.io/${{ github.repository_owner }}/charts

          # Get digest
          DIGEST=$(helm show chart oci://ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME} --version ${CHART_VERSION} 2>&1 | grep -oP 'sha256:[a-f0-9]{64}' | head -1)
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "Pushed chart with digest: ${DIGEST}"

      - name: Sign chart with cosign
        if: steps.check-version.outputs.exists == 'false'
        run: |
          IMAGE_URI="ghcr.io/${{ github.repository_owner }}/charts/${{ steps.chart-metadata.outputs.name }}:${{ steps.chart-metadata.outputs.version }}"
          echo "Signing ${IMAGE_URI}"
          cosign sign --yes "${IMAGE_URI}"
          echo "Chart signed successfully"

      - name: Extract changelog
        if: steps.check-version.outputs.exists == 'false'
        id: changelog
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"
          CHART_VERSION="${{ steps.chart-metadata.outputs.version }}"
          APP_VERSION="${{ steps.chart-metadata.outputs.app_version }}"

          CHANGELOG_RAW=$(yq eval '.annotations."artifacthub.io/changes"' "${CHART_PATH}/Chart.yaml")

          RELEASE_BODY="## Chart: ${CHART_NAME} v${CHART_VERSION}

          **App Version**: ${APP_VERSION}

          ### Installation

          \`\`\`bash
          helm install ${CHART_NAME} \\
            oci://ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME} \\
            --version ${CHART_VERSION}
          \`\`\`

          ### Verification

          \`\`\`bash
          cosign verify \\
            ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME}:${CHART_VERSION} \\
            --certificate-identity \"https://github.com/${{ github.repository }}/.github/workflows/publish-oci.yaml@refs/heads/master\" \\
            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\"
          \`\`\`
          "

          if [ "$CHANGELOG_RAW" != "null" ] && [ -n "$CHANGELOG_RAW" ]; then
            RELEASE_BODY="${RELEASE_BODY}

          ### Changelog

          "
            TEMP_FILE=$(mktemp)
            SEPARATOR="|"
            echo "$CHANGELOG_RAW" | yq eval ".[] | .kind + \"${SEPARATOR}\" + .description" - > "$TEMP_FILE"

            while IFS="${SEPARATOR}" read -r kind description; do
              case "$kind" in
                "added")
                  emoji="✨"
                  ;;
                "changed")
                  emoji="🔄"
                  ;;
                "deprecated")
                  emoji="⚠️"
                  ;;
                "removed")
                  emoji="🗑️"
                  ;;
                "fixed")
                  emoji="🐛"
                  ;;
                "security")
                  emoji="🔒"
                  ;;
                *)
                  emoji="📝"
                  ;;
              esac
              RELEASE_BODY="${RELEASE_BODY}- ${emoji} ${description}
          "
            done < "$TEMP_FILE"

            rm -f "$TEMP_FILE"
          fi

          RELEASE_BODY="${RELEASE_BODY}

          ---

          📦 **Published to**: \`ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME}:${CHART_VERSION}\`
          🔐 **Signed with**: cosign (keyless)
          📝 **Transparency log**: [Rekor](https://rekor.sigstore.dev/)
          "

          # Save to file for gh release create
          echo "$RELEASE_BODY" > release-notes.md

      - name: Create GitHub Release
        if: steps.check-version.outputs.exists == 'false'
        run: |
          gh release create "${{ steps.chart-metadata.outputs.tag }}" \
            --title "${{ steps.chart-metadata.outputs.name }} v${{ steps.chart-metadata.outputs.version }}" \
            --notes-file release-notes.md \
            "${{ steps.chart-metadata.outputs.name }}-${{ steps.chart-metadata.outputs.version }}.tgz"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.check-version.outputs.exists == 'false'
        run: |
          echo "## 🚀 Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ steps.chart-metadata.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.chart-metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: ${{ steps.chart-metadata.outputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`ghcr.io/${{ github.repository_owner }}/charts/${{ steps.chart-metadata.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Signed**: ✅ (cosign keyless)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "helm install ${{ steps.chart-metadata.outputs.name }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  oci://ghcr.io/${{ github.repository_owner }}/charts/${{ steps.chart-metadata.outputs.name }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --version ${{ steps.chart-metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Version already exists
        if: steps.check-version.outputs.exists == 'true'
        run: |
          echo "## ℹ️ Version Already Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release **${{ steps.chart-metadata.outputs.tag }}** already exists." >> $GITHUB_STEP_SUMMARY
          echo "No action taken." >> $GITHUB_STEP_SUMMARY
