suite: test daemonset
templates:
  - daemonset.yaml
  - configmap.yaml
tests:
  - it: should create a DaemonSet with default values
    asserts:
      - template: daemonset.yaml
        hasDocuments:
          count: 1
      - template: daemonset.yaml
        isKind:
          of: DaemonSet
      - template: daemonset.yaml
        equal:
          path: metadata.name
          value: RELEASE-NAME-vipalived
      - template: daemonset.yaml
        equal:
          path: metadata.namespace
          value: kube-system
      - template: daemonset.yaml
        matchRegex:
          path: metadata.labels["app.kubernetes.io/name"]
          pattern: vipalived
      - template: daemonset.yaml
        matchRegex:
          path: metadata.labels["app.kubernetes.io/instance"]
          pattern: RELEASE-NAME
      - template: daemonset.yaml
        matchRegex:
          path: metadata.labels["app.kubernetes.io/component"]
          pattern: control-plane

  - it: should have correct selector labels
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.selector.matchLabels["app.kubernetes.io/name"]
          value: vipalived
      - template: daemonset.yaml
        equal:
          path: spec.selector.matchLabels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: should use RollingUpdate strategy by default
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.updateStrategy.type
          value: RollingUpdate
      - template: daemonset.yaml
        equal:
          path: spec.updateStrategy.rollingUpdate.maxUnavailable
          value: 1

  - it: should support OnDelete update strategy
    set:
      updateStrategy:
        type: OnDelete
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.updateStrategy.type
          value: OnDelete
      - template: daemonset.yaml
        isNull:
          path: spec.updateStrategy.rollingUpdate

  - it: should enable hostNetwork by default
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.hostNetwork
          value: true

  - it: should set priorityClassName
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.priorityClassName
          value: system-node-critical

  - it: should have correct nodeSelector
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.nodeSelector["node-role.kubernetes.io/control-plane"]
          value: "true"

  - it: should have default tolerations
    asserts:
      - template: daemonset.yaml
        isNotNull:
          path: spec.template.spec.tolerations
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.tolerations
          content:
            key: CriticalAddonsOnly
            operator: Exists

  - it: should configure container with correct image
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].name
          value: keepalived
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].image
          value: alpine:3.19
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: IfNotPresent

  - it: should use custom image tag when provided
    set:
      image:
        tag: "3.20"
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].image
          value: alpine:3.20

  - it: should mount config volume
    asserts:
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config
            mountPath: /etc/keepalived
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME-vipalived-config

  - it: should have correct security capabilities
    asserts:
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.containers[0].securityContext.capabilities.add
          content: NET_ADMIN
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.containers[0].securityContext.capabilities.add
          content: NET_RAW
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.containers[0].securityContext.capabilities.add
          content: NET_BROADCAST

  - it: should set resource limits and requests
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 100m
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 64Mi
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 50m
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 32Mi

  - it: should support custom resources
    set:
      resources:
        limits:
          cpu: 200m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 200m
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 128Mi

  - it: should support custom podAnnotations
    set:
      podAnnotations:
        custom/annotation: test-value
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.metadata.annotations["custom/annotation"]
          value: test-value

  - it: should support custom podLabels
    set:
      podLabels:
        custom-label: test-value
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.metadata.labels["custom-label"]
          value: test-value

  - it: should include configmap checksum annotation
    asserts:
      - template: daemonset.yaml
        isNotNull:
          path: spec.template.metadata.annotations["checksum/configmap"]

  - it: should support custom namespace
    set:
      namespace: custom-namespace
    asserts:
      - template: daemonset.yaml
        equal:
          path: metadata.namespace
          value: custom-namespace

  - it: should support imagePullSecrets
    set:
      imagePullSecrets:
        - name: my-secret
    asserts:
      - template: daemonset.yaml
        contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: my-secret

  - it: should support custom affinity
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: custom-key
                    operator: In
                    values:
                      - custom-value
    asserts:
      - template: daemonset.yaml
        isNotNull:
          path: spec.template.spec.affinity
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key
          value: custom-key

  - it: should support podSecurityContext
    set:
      podSecurityContext:
        runAsUser: 1000
        fsGroup: 2000
    asserts:
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - template: daemonset.yaml
        equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000

  - it: should use fullnameOverride when provided
    set:
      fullnameOverride: custom-name
    asserts:
      - template: daemonset.yaml
        equal:
          path: metadata.name
          value: custom-name
