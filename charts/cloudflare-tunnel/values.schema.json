{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Cloudflare Tunnel Values",
  "type": "object",
  "properties": {
    "cloudflare": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "description": "Your Cloudflare account number."
        },
        "tunnelName": {
          "type": "string",
          "description": "The name of the tunnel this instance will serve."
        },
        "tunnelId": {
          "type": "string",
          "description": "The ID of the above tunnel."
        },
        "secret": {
          "type": "string",
          "description": "The secret for the tunnel."
        },
        "secretName": {
          "type": [
            "string",
            "null"
          ],
          "description": "Reference to a secret if no credentials are created."
        },
        "enableWarp": {
          "type": "boolean",
          "description": "If true, turn on WARP routing for TCP."
        },
        "ingress": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string"
              },
              "service": {
                "type": "string"
              }
            }
          },
          "description": "Define ingress rules for the tunnel."
        },
        "enableDefault404": {
          "type": "boolean",
          "description": "Enable the default 404 page."
        },
        "originRequest": {
          "type": "object",
          "description": "Global originRequest configuration for all ingress rules.",
          "properties": {
            "connectTimeout": {
              "type": "string",
              "description": "Timeout for establishing a new TCP connection."
            },
            "tlsTimeout": {
              "type": "string",
              "description": "Timeout for completing a TLS handshake."
            },
            "keepAliveTimeout": {
              "type": "string",
              "description": "Timeout after which an idle keepalive connection is closed."
            },
            "noHappyEyeballs": {
              "type": "boolean",
              "description": "Disable the Happy Eyeballs algorithm."
            },
            "keepAliveConnections": {
              "type": "integer",
              "description": "Maximum number of idle keepalive connections."
            },
            "httpHostHeader": {
              "type": "string",
              "description": "Sets the HTTP Host header for the local service."
            },
            "originServerName": {
              "type": "string",
              "description": "Hostname to use for TLS verification."
            },
            "caPool": {
              "type": "string",
              "description": "Path to the CA certificate."
            },
            "noTLSVerify": {
              "type": "boolean",
              "description": "Disables TLS verification of the origin."
            },
            "disableChunkedEncoding": {
              "type": "boolean",
              "description": "Disables chunked transfer encoding."
            },
            "bastionMode": {
              "type": "boolean",
              "description": "Runs the tunnel as a bastion."
            },
            "proxyAddress": {
              "type": "string",
              "description": "Address of the proxy."
            },
            "proxyPort": {
              "type": "integer",
              "description": "Port of the proxy."
            },
            "proxyType": {
              "type": "string",
              "description": "Type of proxy."
            },
            "http2Origin": {
              "type": "boolean",
              "description": "Use HTTP/2 for connections to the origin."
            }
          }
        }
      },
      "required": [
        "account",
        "tunnelName",
        "tunnelId"
      ]
    },
    "image": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "description": "Docker repository for the image."
        },
        "pullPolicy": {
          "type": "string",
          "description": "Pull policy for the image."
        },
        "tag": {
          "type": [
            "string",
            "null"
          ],
          "description": "Override the appVersion tag."
        }
      }
    },
    "replicaCount": {
      "type": "integer",
      "description": "Number of replicas to deploy."
    },
    "imagePullSecrets": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Secrets for pulling images."
    },
    "serviceAccount": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object"
        },
        "name": {
          "type": [
            "string",
            "null"
          ],
          "description": "Name of the service account."
        }
      }
    },
    "podAnnotations": {
      "type": "object"
    },
    "podSecurityContext": {
      "type": "object",
      "properties": {
        "runAsNonRoot": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "integer"
        }
      }
    },
    "securityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "type": "boolean"
        },
        "capabilities": {
          "type": "object",
          "properties": {
            "drop": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "readOnlyRootFilesystem": {
          "type": "boolean"
        }
      }
    },
    "resources": {
      "type": "object",
      "description": "Resource limits and requests for the containers."
    },
    "nodeSelector": {
      "type": "object"
    },
    "tolerations": {
      "type": "array",
      "items": {
        "type": "object"
      }
    },
    "affinity": {
      "type": "object"
    },
    "serviceMonitor": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable prometheus Service Monitor."
        },
        "jobLabel": {
          "type": "string",
          "description": "Job label for the ServiceMonitor."
        },
        "interval": {
          "type": "string",
          "description": "Scrape interval for Prometheus."
        },
        "metricRelabelings": {
          "type": "array",
          "description": "Metric relabelings for the ServiceMonitor."
        },
        "relabelings": {
          "type": "array",
          "description": "Relabelings for the ServiceMonitor."
        }
      }
    },
    "podDisruptionBudget": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable Pod Disruption Budget."
        },
        "minAvailable": {
          "type": ["integer", "string"],
          "description": "Minimum number of available pods."
        },
        "maxUnavailable": {
          "type": ["integer", "string"],
          "description": "Maximum number of unavailable pods."
        }
      }
    },
    "topologySpreadConstraints": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "maxSkew": {
            "type": "integer"
          },
          "topologyKey": {
            "type": "string"
          },
          "whenUnsatisfiable": {
            "type": "string",
            "enum": ["DoNotSchedule", "ScheduleAnyway"]
          },
          "labelSelector": {
            "type": "object"
          }
        },
        "required": ["maxSkew", "topologyKey", "whenUnsatisfiable"]
      },
      "description": "Topology spread constraints for pod distribution."
    },
    "priorityClassName": {
      "type": "string",
      "description": "Priority class name for pod scheduling priority."
    },
    "metricsPort": {
      "type": "integer",
      "description": "Metrics port for Prometheus metrics and readiness probe.",
      "default": 2000
    },
    "livenessProbe": {
      "type": "object",
      "description": "Liveness probe configuration.",
      "properties": {
        "failureThreshold": {
          "type": "integer",
          "description": "Failure threshold for liveness probe.",
          "default": 1
        },
        "initialDelaySeconds": {
          "type": "integer",
          "description": "Initial delay before liveness probe starts.",
          "default": 10
        },
        "periodSeconds": {
          "type": "integer",
          "description": "Period between liveness probe checks.",
          "default": 10
        },
        "timeoutSeconds": {
          "type": "integer",
          "description": "Timeout for liveness probe."
        }
      }
    },
    "logLevel": {
      "type": "string",
      "description": "Log level for cloudflared (debug, info, warn, error, fatal).",
      "enum": ["debug", "info", "warn", "error", "fatal", ""]
    },
    "podLabels": {
      "type": "object",
      "description": "Additional labels to add to pods."
    },
    "deploymentMode": {
      "type": "string",
      "description": "Deployment mode: deployment or daemonset.",
      "enum": ["deployment", "daemonset"],
      "default": "deployment"
    }
  },
  "required": [
    "cloudflare",
    "image",
    "replicaCount"
  ]
}