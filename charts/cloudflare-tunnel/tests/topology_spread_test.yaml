suite: test topology spread constraints
templates:
  - deployment.yaml
  - configmap.yaml
  - secret.yaml
values:
  - ../values.yaml
tests:
  - it: should not have topology spread constraints by default
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
    asserts:
      - template: deployment.yaml
        isNull:
          path: spec.template.spec.topologySpreadConstraints

  - it: should add topology spread constraints when specified
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: cloudflare-tunnel
    asserts:
      - template: deployment.yaml
        isNotNull:
          path: spec.template.spec.topologySpreadConstraints
      - template: deployment.yaml
        lengthEqual:
          path: spec.template.spec.topologySpreadConstraints
          count: 1

  - it: should correctly set maxSkew
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 2
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[0].maxSkew
          value: 2

  - it: should correctly set topologyKey
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[0].topologyKey
          value: kubernetes.io/hostname

  - it: should correctly set whenUnsatisfiable
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[0].whenUnsatisfiable
          value: ScheduleAnyway

  - it: should support multiple topology spread constraints
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
        - maxSkew: 2
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
    asserts:
      - template: deployment.yaml
        lengthEqual:
          path: spec.template.spec.topologySpreadConstraints
          count: 2
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[0].topologyKey
          value: topology.kubernetes.io/zone
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[1].topologyKey
          value: kubernetes.io/hostname

  - it: should support custom labelSelector
    set:
      cloudflare:
        account: test-account
        tunnelName: test-tunnel
        tunnelId: test-id
        secret: test-secret
        ingress:
          - hostname: test.example.com
            service: http://test-service:80
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              custom: label
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.topologySpreadConstraints[0].labelSelector.matchLabels.custom
          value: label
