{{ template "chart.header" . }}

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

## üìä Status & Metrics

[![Lint and Test](https://github.com/lexfrei/charts/actions/workflows/test.yaml/badge.svg)](https://github.com/lexfrei/charts/actions/workflows/test.yaml)
[![Artifact Hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/lexfrei-charts)](https://artifacthub.io/packages/helm/lexfrei-charts/cloudflare-tunnel)
[![License](https://img.shields.io/badge/License-BSD--3--Clause-blue.svg)](https://github.com/lexfrei/charts/blob/master/LICENSE)
[![Helm Version](https://img.shields.io/badge/Helm-v3-informational?logo=helm)](https://helm.sh/)
[![Kubernetes Version](https://img.shields.io/badge/Kubernetes-1.19%2B-blue?logo=kubernetes)](https://kubernetes.io/)

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

> **Note**: This chart uses the official Cloudflare Docker image [`cloudflare/cloudflared`](https://hub.docker.com/r/cloudflare/cloudflared) maintained by Cloudflare.

## ‚ú® Features

- üöÄ **Zero Trust Network Access** - Secure remote access to your Kubernetes services without exposing them to the internet
- üîÑ **Dual Deployment Modes** - Choose between Deployment or DaemonSet for optimal resource utilization
- üìä **Prometheus Integration** - Built-in ServiceMonitor support for metrics collection
- üõ°Ô∏è **Hardened Security** - Non-root containers, read-only filesystem, dropped capabilities
- üåê **WARP Routing** - Optional TCP traffic routing through Cloudflare WARP
- ‚öñÔ∏è **High Availability** - Support for Pod Disruption Budgets and topology spread constraints
- üîß **Flexible Configuration** - Comprehensive ingress rules and origin request settings
- üìà **Production Ready** - Health checks, resource limits, and node affinity support

## üéØ Use Cases

- Expose internal Kubernetes services securely to the internet
- Create secure tunnels for development and staging environments
- Implement Zero Trust network architecture
- Connect on-premises services to Cloudflare's network
- Enable secure remote access without VPNs

## üê≥ Docker Image

This Helm chart uses the **official Cloudflare Docker image**:
- **Image**: [`cloudflare/cloudflared`](https://hub.docker.com/r/cloudflare/cloudflared)
- **Maintained by**: Cloudflare
- **Auto-updated**: Via Renovate bot to track latest releases
- **Source**: [github.com/cloudflare/cloudflared](https://github.com/cloudflare/cloudflared)

## üìã Prerequisites

- Kubernetes 1.19+
- Helm 3.0+
- Cloudflare account with Zero Trust enabled
- Cloudflare Tunnel created and configured

## üöÄ Installation

This chart is published to GitHub Container Registry (GHCR) as an OCI artifact.

### Create Cloudflare Tunnel

Before installing the chart, create a tunnel in Cloudflare:

1. Go to [Cloudflare Zero Trust](https://one.dash.cloudflare.com/)
2. Navigate to Networks ‚Üí Tunnels
3. Create a new tunnel and note the Tunnel ID and Secret

### Install Chart from GHCR

```bash
# Install with inline configuration
helm install cloudflare-tunnel \
  oci://ghcr.io/lexfrei/charts/cloudflare-tunnel \
  --version {{ template "chart.version" . }} \
  --set cloudflare.account=YOUR_ACCOUNT_ID \
  --set cloudflare.tunnelName=YOUR_TUNNEL_NAME \
  --set cloudflare.tunnelId=YOUR_TUNNEL_ID \
  --set cloudflare.secret=YOUR_TUNNEL_SECRET \
  --set cloudflare.ingress[0].hostname=example.com \
  --set cloudflare.ingress[0].service=http://my-service:80

# Install with values file
helm install cloudflare-tunnel \
  oci://ghcr.io/lexfrei/charts/cloudflare-tunnel \
  --version {{ template "chart.version" . }} \
  --values values.yaml
```

### Chart Verification

This chart is signed with [cosign](https://github.com/sigstore/cosign) using keyless signing. Verify the signature before installation:

```bash
cosign verify \
  ghcr.io/lexfrei/charts/cloudflare-tunnel:{{ template "chart.version" . }} \
  --certificate-identity "https://github.com/lexfrei/charts/.github/workflows/publish-oci.yaml@refs/heads/master" \
  --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
```

The signature is stored in the [Rekor transparency log](https://rekor.sigstore.dev/) for public verification.

## üìù Configuration Examples

### Basic HTTP Service

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "my-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  ingress:
    - hostname: app.example.com
      service: http://my-app:8080
```

### Multiple Services with Different Configurations

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "multi-service-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  ingress:
    - hostname: api.example.com
      service: http://api-service:8080
    - hostname: web.example.com
      service: http://web-service:80
    - hostname: admin.example.com
      service: http://admin-service:9000
```

### DaemonSet Mode for Better Resource Distribution

```yaml
deploymentMode: daemonset
cloudflare:
  account: "your-account-id"
  tunnelName: "distributed-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  ingress:
    - hostname: service.example.com
      service: http://my-service:80
```

### Advanced Configuration with Origin Request Settings

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "advanced-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  enableWarp: true
  originRequest:
    connectTimeout: 30s
    tlsTimeout: 10s
    keepAliveTimeout: 90s
    keepAliveConnections: 100
    noTLSVerify: false
  ingress:
    - hostname: secure.example.com
      service: https://backend-service:443
```

### Protocol and Network Configuration

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "protocol-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  # Protocol selection (auto/quic/http2)
  protocol: "quic"
  # Enable post-quantum cryptography for QUIC
  postQuantum: true
  # Cloudflare region selection (us/empty for global)
  region: "us"
  # Connection retries on errors
  retries: 3
  # IP version preference (auto/4/6)
  edgeIpVersion: "auto"
  # Graceful shutdown timeout
  gracePeriod: "30s"
  # Bind outgoing connections to specific IP
  edgeBindAddress: "192.168.1.100"
  # Tags for tunnel identification and monitoring
  tags:
    environment: production
    team: platform
    service: web-frontend
  ingress:
    - hostname: fast.example.com
      service: http://my-service:80
```

### Post-Quantum Cryptography Example

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "quantum-safe-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  # Use QUIC with post-quantum cryptography
  protocol: "quic"
  postQuantum: true
  ingress:
    - hostname: secure.example.com
      service: https://backend:443
```

### Regional Edge Selection

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "us-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  # Force US-based edge servers for compliance
  region: "us"
  # Optimize for IPv4 connectivity
  edgeIpVersion: "4"
  ingress:
    - hostname: us-only.example.com
      service: http://compliance-service:8080
```

### High-Reliability Configuration

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "reliable-tunnel"
  tunnelId: "tunnel-id"
  secret: "tunnel-secret"
  # Aggressive retry policy
  retries: 5
  # Extended graceful shutdown for long-running requests
  gracePeriod: "60s"
  # Tag for monitoring and alerting
  tags:
    criticality: high
    monitoring: enabled
  ingress:
    - hostname: critical.example.com
      service: http://critical-service:80
```

### High Availability Setup

```yaml
replicaCount: 3

podDisruptionBudget:
  enabled: true
  minAvailable: 2

topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: cloudflare-tunnel

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: cloudflare-tunnel
          topologyKey: kubernetes.io/hostname

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi
```

### Prometheus Monitoring

```yaml
serviceMonitor:
  enabled: true
  interval: 30s
  metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'cloudflared_.*'
      action: keep

metricsPort: 2000
```

### Using Existing Secret

```yaml
cloudflare:
  account: "your-account-id"
  tunnelName: "my-tunnel"
  tunnelId: "tunnel-id"
  secretName: "existing-tunnel-secret"  # Secret should have 'credentials.json' key
  ingress:
    - hostname: app.example.com
      service: http://my-service:80
```

## ‚öôÔ∏è Advanced Protocol Configuration

### Protocol Selection

The chart supports three transport protocols:

- **`auto`** (default): Automatically selects the best protocol
- **`quic`**: Uses QUIC protocol for improved performance
- **`http2`**: Uses HTTP/2 for compatibility with older networks

### Post-Quantum Cryptography

When using QUIC protocol, you can enable post-quantum cryptography for enhanced security:

```yaml
cloudflare:
  protocol: "quic"
  postQuantum: true
```

**Important**: Post-quantum cryptography is only available with QUIC protocol. The chart includes validation to prevent incompatible combinations.

### Regional Edge Selection

Control which Cloudflare edge servers your tunnel connects to:

- **`""` (empty, default)**: Global edge selection (best performance)
- **`"us"`**: US-only edge servers (compliance requirements)

### IP Version Control

Configure IP version preference for edge connections:

- **`auto`** (default): Automatically select IPv4 or IPv6
- **`4`**: Force IPv4 connections only
- **`6`**: Force IPv6 connections only

### Connection Reliability

Fine-tune connection behavior:

- **`retries`**: Number of connection retries on errors (default: 5)
- **`gracePeriod`**: Graceful shutdown timeout (default: "30s")
- **`edgeBindAddress`**: Bind outgoing connections to specific IP address

### Tagging and Monitoring

Add metadata tags to your tunnel for identification and monitoring:

```yaml
cloudflare:
  tags:
    environment: production
    team: platform
    cost-center: engineering
    monitoring: prometheus
```

## üîç Deployment Modes

### Deployment Mode (Default)

- Multiple replicas distributed across nodes
- Better for high availability
- Can scale horizontally
- Default mode for most use cases

### DaemonSet Mode

- One pod per node
- Prevents port exhaustion issues
- Follows Cloudflare's recommendations
- Better for large clusters with many services

To use DaemonSet mode:

```yaml
deploymentMode: daemonset
```

## üîê Security

This chart implements several security best practices:

- **Non-root user**: Runs as UID 65532
- **Read-only root filesystem**: Prevents filesystem modifications
- **Dropped capabilities**: All Linux capabilities are dropped
- **No privilege escalation**: Container cannot gain additional privileges

## üìä Monitoring

The chart exposes Prometheus metrics on port 2000 (configurable via `metricsPort`). When `serviceMonitor.enabled` is set to `true`, a ServiceMonitor resource is created for automatic Prometheus discovery.

Available metrics include:
- `cloudflared_tunnel_total_requests` - Total number of requests
- `cloudflared_tunnel_request_errors` - Number of request errors
- `cloudflared_tunnel_concurrent_requests_per_tunnel` - Current concurrent requests
- And many more...

## üîß Troubleshooting

### Tunnel Not Connecting

1. Verify credentials are correct
2. Check if tunnel exists in Cloudflare dashboard
3. Examine pod logs: `kubectl logs -l app.kubernetes.io/name=cloudflare-tunnel`

### Port Exhaustion

If experiencing port exhaustion on nodes:

1. Switch to DaemonSet mode:
   ```yaml
   deploymentMode: daemonset
   ```
2. Reduce number of replicas per node

### Metrics Not Appearing

1. Ensure ServiceMonitor CRD is installed (Prometheus Operator)
2. Verify `serviceMonitor.enabled: true`
3. Check Prometheus is configured to discover ServiceMonitors

## üìö Useful Links

- [Cloudflare Tunnel Documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/)
- [Cloudflared GitHub Repository](https://github.com/cloudflare/cloudflared)
- [Ingress Rules Configuration](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress)
- [Origin Request Settings](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress#origin-request)

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## üìÑ License

This chart is licensed under the BSD-3-Clause License.

{{ template "helm-docs.versionFooter" . }}
